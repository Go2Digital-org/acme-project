<?php

namespace Illuminate\Support;

use ArrayAccess;
use ArrayIterator;
use CachingIterator;
use Closure;
use Countable;
use Illuminate\Contracts\Support\Arrayable;
use Illuminate\Contracts\Support\Jsonable;
use IteratorAggregate;
use JsonSerializable;

/**
 * Comprehensive Collection stub for PHPStan level 8 compatibility.
 *
 * @template TKey of array-key
 * @template TValue
 *
 * @implements ArrayAccess<TKey, TValue>
 * @implements Arrayable<TKey, TValue>
 * @implements IteratorAggregate<TKey, TValue>
 */
class Collection implements ArrayAccess, Arrayable, Countable, IteratorAggregate, Jsonable, JsonSerializable
{
    /**
     * The items contained in the collection.
     *
     * @var array<TKey, TValue>
     */
    protected $items = [];

    /**
     * Create a new collection.
     *
     * @param  Arrayable<TKey, TValue>|iterable<TKey, TValue>|null  $items
     * @return void
     */
    public function __construct($items = []) {}

    /**
     * Create a new collection instance if the value isn't one already.
     *
     * @template TMakeKey of array-key
     * @template TMakeValue
     *
     * @param  Arrayable<TMakeKey, TMakeValue>|iterable<TMakeKey, TMakeValue>|null  $items
     * @return static<TMakeKey, TMakeValue>
     */
    public static function make($items = []): static {}

    /**
     * Get all items in the collection.
     *
     * @return array<TKey, TValue>
     */
    public function all(): array {}

    /**
     * Get the average value of a given key.
     *
     * @param  callable(TValue, TKey): float|string|null  $callback
     * @return float|null
     */
    public function avg(callable $callback = null): ?float {}

    /**
     * Determine if an item exists in the collection.
     *
     * @param  (callable(TValue, TKey): bool)|TValue|string  $key
     * @param  mixed  $operator
     * @param  mixed  $value
     * @return bool
     */
    public function contains($key, $operator = null, $value = null): bool {}

    /**
     * Execute a callback over each item.
     *
     * @param  callable(TValue, TKey): mixed  $callback
     * @return $this
     */
    public function each(callable $callback): static {}

    /**
     * Run a filter over each of the items.
     *
     * @param  callable(TValue, TKey): bool|null  $callback
     * @return static<TKey, TValue>
     */
    public function filter(callable $callback = null): static {}

    /**
     * Get the first item from the collection.
     *
     * @template TFirstDefault
     *
     * @param  callable(TValue, TKey): bool|null  $callback
     * @param  TFirstDefault|(\Closure(): TFirstDefault)  $default
     * @return TValue|TFirstDefault
     */
    public function first(callable $callback = null, $default = null) {}

    /**
     * Get a flattened array of the items in the collection.
     *
     * @param  int  $depth
     * @return static<int, mixed>
     */
    public function flatten(int $depth = INF): static {}

    /**
     * Get an item from the collection by key.
     *
     * @template TGetDefault
     *
     * @param  TKey  $key
     * @param  TGetDefault|(\Closure(): TGetDefault)  $default
     * @return TValue|TGetDefault
     */
    public function get($key, $default = null) {}

    /**
     * Group an associative array by a field or using a callback.
     *
     * @param  (callable(TValue, TKey): array-key)|array<array-key, string>|string  $groupBy
     * @param  bool  $preserveKeys
     * @return static<array-key, static<array-key, TValue>>
     */
    public function groupBy($groupBy, bool $preserveKeys = false): static {}

    /**
     * Determine if an item exists in the collection by key.
     *
     * @param  TKey|array<array-key, TKey>  $key
     * @return bool
     */
    public function has($key): bool {}

    /**
     * Concatenate values of a given key as a string.
     *
     * @param  callable(TValue, TKey): string|string  $value
     * @param  string|null  $glue
     * @return string
     */
    public function implode($value, $glue = null): string {}

    /**
     * Determine if the collection is empty or not.
     *
     * @return bool
     */
    public function isEmpty(): bool {}

    /**
     * Get the keys of the collection items.
     *
     * @return static<int, TKey>
     */
    public function keys(): static {}

    /**
     * Get the last item from the collection.
     *
     * @template TLastDefault
     *
     * @param  callable(TValue, TKey): bool|null  $callback
     * @param  TLastDefault|(\Closure(): TLastDefault)  $default
     * @return TValue|TLastDefault
     */
    public function last(callable $callback = null, $default = null) {}

    /**
     * Run a map over each of the items.
     *
     * @template TMapValue
     *
     * @param  callable(TValue, TKey): TMapValue  $callback
     * @return static<TKey, TMapValue>
     */
    public function map(callable $callback): static {}

    /**
     * Merge the collection with the given items.
     *
     * @param  Arrayable<array-key, mixed>|iterable<array-key, mixed>  $items
     * @return static<TKey|int, TValue|mixed>
     */
    public function merge($items): static {}

    /**
     * Get the values of a given key.
     *
     * @param  string|array<array-key, string>  $value
     * @param  string|null  $key
     * @return static<array-key, mixed>
     */
    public function pluck($value, $key = null): static {}

    /**
     * Get and remove the last item from the collection.
     *
     * @return TValue|null
     */
    public function pop() {}

    /**
     * Push one or more items onto the end of the collection.
     *
     * @param  TValue  ...$values
     * @return $this
     */
    public function push(...$values): static {}

    /**
     * Put an item in the collection by key.
     *
     * @template TPutKey of array-key
     * @template TPutValue
     *
     * @param  TPutKey  $key
     * @param  TPutValue  $value
     * @return $this
     */
    public function put($key, $value): static {}

    /**
     * Reduce the collection to a single value.
     *
     * @template TReduceInitial
     * @template TReduceReturnType
     *
     * @param  callable(TReduceInitial, TValue, TKey): TReduceReturnType  $callback
     * @param  TReduceInitial  $initial
     * @return TReduceReturnType
     */
    public function reduce(callable $callback, $initial = null) {}

    /**
     * Create a collection of all elements that do not pass a given truth test.
     *
     * @param  (callable(TValue, TKey): bool)|TValue  $callback
     * @return static<TKey, TValue>
     */
    public function reject($callback = true): static {}

    /**
     * Reverse items order.
     *
     * @return static<TKey, TValue>
     */
    public function reverse(): static {}

    /**
     * Search the collection for a given value and return the corresponding key if successful.
     *
     * @param  TValue|(callable(TValue, TKey): bool)  $value
     * @param  bool  $strict
     * @return TKey|false
     */
    public function search($value, bool $strict = false) {}

    /**
     * Get and remove the first item from the collection.
     *
     * @return TValue|null
     */
    public function shift() {}

    /**
     * Shuffle the items in the collection.
     *
     * @param  int|null  $seed
     * @return static<TKey, TValue>
     */
    public function shuffle($seed = null): static {}

    /**
     * Slice the underlying collection array.
     *
     * @param  int  $offset
     * @param  int|null  $length
     * @return static<TKey, TValue>
     */
    public function slice(int $offset, int $length = null): static {}

    /**
     * Sort through each item with a callback.
     *
     * @param  (callable(TValue, TValue): int)|null  $callback
     * @return static<TKey, TValue>
     */
    public function sort(callable $callback = null): static {}

    /**
     * Sort the collection using the given callback.
     *
     * @param  (callable(TValue, TKey): mixed)|array<array-key, (callable(TValue, TKey): mixed)|string>|string  $callback
     * @param  int  $options
     * @param  bool  $descending
     * @return static<TKey, TValue>
     */
    public function sortBy($callback, int $options = SORT_REGULAR, bool $descending = false): static {}

    /**
     * Get the sum of the given values.
     *
     * @param  (callable(TValue): mixed)|string|null  $callback
     * @return mixed
     */
    public function sum($callback = null) {}

    /**
     * Take the first or last {$limit} items.
     *
     * @param  int  $limit
     * @return static<TKey, TValue>
     */
    public function take(int $limit): static {}

    /**
     * Transform each item in the collection using a callback.
     *
     * @param  callable(TValue, TKey): TValue  $callback
     * @return $this
     */
    public function transform(callable $callback): static {}

    /**
     * Get the unique items in the collection.
     *
     * @param  (callable(TValue, TKey): mixed)|string|null  $key
     * @param  bool  $strict
     * @return static<TKey, TValue>
     */
    public function unique($key = null, bool $strict = false): static {}

    /**
     * Reset the keys on the underlying array.
     *
     * @return static<int, TValue>
     */
    public function values(): static {}

    /**
     * Filter items by the given key value pair.
     *
     * @param  string  $key
     * @param  mixed  $operator
     * @param  mixed  $value
     * @return static<TKey, TValue>
     */
    public function where($key, $operator = null, $value = null): static {}

    /**
     * Filter items by the given key value pair.
     *
     * @param  string  $key
     * @param  Arrayable<array-key, mixed>|iterable<array-key, mixed>  $values
     * @param  bool  $strict
     * @return static<TKey, TValue>
     */
    public function whereIn($key, $values, bool $strict = false): static {}

    /**
     * Zip the collection together with one or more arrays.
     *
     * @template TZipValue
     *
     * @param  Arrayable<array-key, TZipValue>|iterable<array-key, TZipValue>  ...$items
     * @return static<int, static<int, TValue|TZipValue>>
     */
    public function zip($items): static {}

    /**
     * Get an iterator for the items.
     *
     * @return \ArrayIterator<TKey, TValue>
     */
    public function getIterator(): ArrayIterator {}

    /**
     * Count the number of items in the collection.
     *
     * @return int
     */
    public function count(): int {}

    /**
     * Determine if an item exists at an offset.
     *
     * @param  TKey  $key
     * @return bool
     */
    public function offsetExists($key): bool {}

    /**
     * Get an item at a given offset.
     *
     * @param  TKey  $key
     * @return TValue
     */
    public function offsetGet($key): mixed {}

    /**
     * Set the item at a given offset.
     *
     * @param  TKey|null  $key
     * @param  TValue  $value
     * @return void
     */
    public function offsetSet($key, $value): void {}

    /**
     * Unset the item at a given offset.
     *
     * @param  TKey  $key
     * @return void
     */
    public function offsetUnset($key): void {}

    /**
     * Get the collection of items as a plain array.
     *
     * @return array<TKey, mixed>
     */
    public function toArray(): array {}

    /**
     * Convert the object into something JSON serializable.
     *
     * @return array<TKey, mixed>
     */
    public function jsonSerialize(): array {}

    /**
     * Get the collection of items as JSON.
     *
     * @param  int  $options
     * @return string
     */
    public function toJson($options = 0): string {}

    /**
     * Convert the collection to its string representation.
     *
     * @return string
     */
    public function __toString(): string {}
}