<?php

declare(strict_types=1);

namespace Modules\Dashboard\Infrastructure\Laravel\Provider;

use Illuminate\Support\ServiceProvider;
use Modules\Dashboard\Application\Command\InvalidateUserDashboardCacheCommandHandler;
use Modules\Dashboard\Application\Command\WarmUserDashboardCacheCommandHandler;
use Modules\Dashboard\Application\Query\GetDashboardCacheStatusQueryHandler;
use Modules\Dashboard\Application\Query\GetUserDashboardDataQueryHandler;
use Modules\Dashboard\Application\Service\UserDashboardCacheService;
use Modules\Dashboard\Application\Service\UserDashboardService;
use Modules\Dashboard\Domain\Repository\DashboardRepositoryInterface;
use Modules\Dashboard\Infrastructure\ApiPlatform\Handler\Processor\InvalidateDashboardCacheProcessor;
use Modules\Dashboard\Infrastructure\ApiPlatform\Handler\Processor\RefreshDashboardCacheProcessor;
use Modules\Dashboard\Infrastructure\ApiPlatform\Handler\Processor\WarmDashboardCacheProcessor;
use Modules\Dashboard\Infrastructure\ApiPlatform\Handler\Provider\DashboardCacheStatusProvider;
use Modules\Dashboard\Infrastructure\ApiPlatform\Handler\Provider\DashboardDataProvider;
use Modules\Dashboard\Infrastructure\Laravel\Repository\EloquentDashboardRepository;

final class DashboardServiceProvider extends ServiceProvider
{
    public function register(): void
    {
        // Bind repository interface to implementation
        $this->app->bind(
            DashboardRepositoryInterface::class,
            EloquentDashboardRepository::class,
        );

        // Register cache service as singleton
        $this->app->singleton(UserDashboardCacheService::class);

        // Register dashboard service
        $this->app->singleton(UserDashboardService::class);

        // Register query handlers
        $this->app->singleton(GetDashboardCacheStatusQueryHandler::class);
        $this->app->singleton(GetUserDashboardDataQueryHandler::class);

        // Register command handlers
        $this->app->singleton(InvalidateUserDashboardCacheCommandHandler::class);
        $this->app->singleton(WarmUserDashboardCacheCommandHandler::class);

        // Register API Platform providers
        $this->app->singleton(DashboardCacheStatusProvider::class);
        $this->app->singleton(DashboardDataProvider::class);

        // Register API Platform processors
        $this->app->singleton(InvalidateDashboardCacheProcessor::class);
        $this->app->singleton(RefreshDashboardCacheProcessor::class);
        $this->app->singleton(WarmDashboardCacheProcessor::class);
    }

    public function boot(): void
    {
        // API routes are auto-generated by API Platform
        // No manual route loading needed
    }
}
