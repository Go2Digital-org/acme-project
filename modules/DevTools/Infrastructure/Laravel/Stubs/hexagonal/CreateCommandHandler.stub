<?php

declare(strict_types=1);

namespace Modules\{{domain}}\Application\Command;

use Modules\{{domain}}\Domain\Model\{{domain}};
use Modules\{{domain}}\Domain\Repository\{{domain}}RepositoryInterface;

/**
 * Handler for Create{{domain}}Command.
 *
 * This handler processes the command to create a new {{domain}} entity.
 * It follows the CQRS pattern and delegates to the domain repository.
 */
final class {{prefix}}Create{{domain}}CommandHandler
{
    /**
     * @param {{domain}}RepositoryInterface ${{domainCamelCase}}Repository The repository for {{domain}} entities
     */
    public function __construct(private readonly {{domain}}RepositoryInterface ${{domainCamelCase}}Repository)
    {
    }

    /**
     * Handle the create {{domain}} command.
     *
     * @param Create{{domain}}Command $command The command containing {{domain}} data
     * @return {{domain}} The created {{domain}} entity
     */
    public function handle(Create{{domain}}Command $command): {{domain}}
    {
        return $this->{{domainCamelCase}}Repository->add(
            $command->name,
            $command->description,
            $command->status,
            $command->createdBy,
            $command->isActive
        );
    }
}