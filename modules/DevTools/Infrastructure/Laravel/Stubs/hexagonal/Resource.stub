<?php

declare(strict_types=1);

namespace Modules\{{domain}}\Infrastructure\ApiPlatform\Resource;

use ApiPlatform\Laravel\Eloquent\Filter\DateFilter;
use ApiPlatform\Laravel\Eloquent\Filter\EqualsFilter;
use ApiPlatform\Laravel\Eloquent\Filter\OrderFilter;
use ApiPlatform\Laravel\Eloquent\Filter\PartialSearchFilter;
use ApiPlatform\Metadata\ApiResource;
use ApiPlatform\Metadata\Delete;
use ApiPlatform\Metadata\Get;
use ApiPlatform\Metadata\GetCollection;
use ApiPlatform\Metadata\Patch;
use ApiPlatform\Metadata\Post;
use ApiPlatform\Metadata\Put;
use ApiPlatform\Metadata\QueryParameter;
use Illuminate\Http\Response;
use Illuminate\Support\Carbon;
use Modules\{{domain}}\Domain\Model\{{domain}};
use Modules\{{domain}}\Infrastructure\ApiPlatform\Handler\Processor\Create{{domain}}Processor;
use Modules\{{domain}}\Infrastructure\ApiPlatform\Handler\Processor\Delete{{domain}}Processor;
use Modules\{{domain}}\Infrastructure\ApiPlatform\Handler\Processor\Patch{{domain}}Processor;
use Modules\{{domain}}\Infrastructure\ApiPlatform\Handler\Processor\Put{{domain}}Processor;
use Modules\{{domain}}\Infrastructure\ApiPlatform\Handler\Provider\{{domain}}CollectionProvider;
use Modules\{{domain}}\Infrastructure\ApiPlatform\Handler\Provider\{{domain}}ItemProvider;
use Modules\{{domain}}\Infrastructure\Laravel\FormRequest\Create{{domain}}FormRequest;
use Modules\{{domain}}\Infrastructure\Laravel\FormRequest\Patch{{domain}}FormRequest;
use Modules\{{domain}}\Infrastructure\Laravel\FormRequest\Put{{domain}}FormRequest;
use Modules\Shared\Infrastructure\ApiPlatform\Filter\MultiSearchFilter;

#[ApiResource(
    shortName: '{{domain}}',
    operations: [
        new GetCollection(
            uriTemplate: '/{{domain_lc}}',
            paginationEnabled: true,
            paginationItemsPerPage: 10,
            paginationMaximumItemsPerPage: 50,
            paginationClientItemsPerPage: true,
            provider: {{domain}}CollectionProvider::class,
            parameters: [
                new QueryParameter(key: 'id', filter: EqualsFilter::class),
                new QueryParameter(key: 'title', filter: PartialSearchFilter::class),
                new QueryParameter(key: 'author', filter: EqualsFilter::class),
                new QueryParameter(key: 'is_available', filter: EqualsFilter::class),
                new QueryParameter(key: 'pages', filter: EqualsFilter::class),
                new QueryParameter(key: 'published_year', filter: EqualsFilter::class),
                new QueryParameter(key: 'q', filter: PartialSearchFilter::class),
                new QueryParameter(
                    key: 'search',
                    filter: MultiSearchFilter::class,
                    extraProperties: ['title', 'author']
                ),
                new QueryParameter(key: 'sort[:property]', filter: OrderFilter::class),
                new QueryParameter(key: 'created_at', filter: DateFilter::class),
                new QueryParameter(key: 'updated_at', filter: DateFilter::class),
            ],
        ),
        new Get(
            uriTemplate: '/{{domain_lc}}/{id}',
            provider: {{domain}}ItemProvider::class,
        ),
        new Post(
            uriTemplate: '/{{domain_lc}}',
            status: Response::HTTP_CREATED,
            processor: Create{{domain}}Processor::class,
            rules: Create{{domain}}FormRequest::class
        ),
        new Put(
            uriTemplate: '/{{domain_lc}}/{id}',
            status: Response::HTTP_ACCEPTED,
            provider: {{domain}}ItemProvider::class,
            processor: Put{{domain}}Processor::class,
            rules: Put{{domain}}FormRequest::class
        ),
        new Delete(
            uriTemplate: '/{{domain_lc}}/{id}',
            status: Response::HTTP_ACCEPTED,
            provider: {{domain}}ItemProvider::class,
            processor: Delete{{domain}}Processor::class,
        ),
        new Patch(
            uriTemplate: '/{{domain_lc}}/{id}',
            status: Response::HTTP_ACCEPTED,
            provider: {{domain}}ItemProvider::class,
            processor: Patch{{domain}}Processor::class,
            rules: Patch{{domain}}FormRequest::class,
        ),
    ],
    middleware: ['auth:api'],
)]
class {{domain}}Resource
{
    public function __construct(
        public ?int $id = null,
        public ?string $title = null,
        public ?string $author = null,
        public ?int $pages = null,
        public ?int $published_year = null,
        public ?bool $is_available = null,
        public ?string $created_at = null,
        public ?string $updated_at = null,
    ) {}

    public static function fromModel({{domain}} ${{domainCamelCase}}): self
    {
        return new self(
            id: ${{domainCamelCase}}->id,
            title: ${{domainCamelCase}}->title,
            author: ${{domainCamelCase}}->author,
            pages: ${{domainCamelCase}}->pages,
            published_year: ${{domainCamelCase}}->published_year,
            is_available: ${{domainCamelCase}}->is_available,
            created_at: Carbon::parse(${{domainCamelCase}}->created_at)->toDateTimeString(),
            updated_at: Carbon::parse(${{domainCamelCase}}->updated_at)->toDateTimeString(),
        );
    }
}
